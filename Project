import numpy as np
import pandas as pd
df=pd.read_excel(r"C:\Users\DELL\Desktop\REPORT\DATA-FINAL.xls")
print(df.head())
print(df.info())

import matplotlib.pyplot as plt
import seaborn as sns
allcolumns=df.columns
for item in allcolumns:
    print(df[item].nunique())
correl=df.corr()
print(correl)
sns.countplot(df["Grade"])
plt.show()

print(df.Grade.nunique())
df1=df.dropna()

from sklearn.model_selection import train_test_split
#Creating features and label for dataset
x=df1.drop(["Grade","Regd No","Termid","Course","MHRDName","Height","Weight","ScholarType","CA_1","CA_2","CA_3","CA_4","Direction","Gender","Medium","CourseType","ProgramType"],axis=1)
y=df1["Grade"]
print(x)
print(y)

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3, random_state=101)
from sklearn.preprocessing import StandardScaler
scale=StandardScaler()
x_train=scale.fit_transform(x_train)
print(x_train)
x_test=scale.fit_transform(x_test)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report, confusion_matrix

print()
print("Predicted through KNN Classifier ")
print()
model = KNeighborsClassifier(n_neighbors=5)
model.fit(x_train, y_train)
predictedvalues = model.predict(x_test)
print(accuracy_score(y_test,predictedvalues))
print(confusion_matrix(y_test,predictedvalues))
print(classification_report(y_test, predictedvalues))

print()
print("Predicted through LogisticRegression Classifier ")
print()
model = LogisticRegression()
model.fit(x_train, y_train)
predictedvalues=model.predict(x_test)
print(accuracy_score(y_test,predictedvalues))
print(confusion_matrix(y_test, predictedvalues))
print(classification_report(y_test, predictedvalues))

print()
print("Predicted through RandomForest Classifier ")
print()
model = RandomForestClassifier()
model.fit(x_train, y_train)
predictedvalues=model.predict(x_test)
print(accuracy_score(y_test,predictedvalues))
print(confusion_matrix(y_test, predictedvalues))
print(classification_report(y_test, predictedvalues))

print()
print("Predicted through AdaBoost Classifier ")
print()
model = AdaBoostClassifier()
model.fit(x_train, y_train)
predictedvalues=model.predict(x_test)
print(accuracy_score(y_test,predictedvalues))
print(confusion_matrix(y_test, predictedvalues))
print(classification_report(y_test, predictedvalues))

print()
print("Predicted through GradientBoosting Classifier ")
print()
model = GradientBoostingClassifier()
model.fit(x_train, y_train)
predictedvalues=model.predict(x_test)
print(accuracy_score(y_test,predictedvalues))
print(confusion_matrix(y_test, predictedvalues))
print(classification_report(y_test, predictedvalues))

print(y)
print(x)

import pandas as pd
import matplotlib.pyplot as plt
df=pd.DataFrame(df,columns=['CA_100','Course_Att','ETP_100','ETT_100','MTT_50'])
df.hist()
plt.show()
